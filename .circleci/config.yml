# .circleci/config.yml
version: 2
jobs:
  build:
    docker:
      - image: circleci/node:10

    environment:
      TEST_REPORTS: /tmp/test-reports
    steps:
      - checkout
      - restore_cache: # special step to restore the dependency cache
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: Setup Dependencies
          command: npm install
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      - save_cache: # special step to save the dependency cache
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: # run tests
          name: Run Test
          command: |
            ./cc-test-reporter before-build
            npm run test:ci
            ./cc-test-reporter after-build --exit-code $?
          environment:
            JEST_JUNIT_OUTPUT: "coverage/junit/js-test-results.xml"
      - store_test_results:
          path: coverage/junit
      - store_artifacts:
          path: coverage

  deploy-auto:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy Master to Automation
          command: git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$AUTO_HEROKU_APP_NAME.git master --force
  deploy-test:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy Master to Test
          command: git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$TEST_HEROKU_APP_NAME.git master --force
  deploy-prod:
    docker:
      - image: buildpack-deps:trusty
    steps:
      - checkout
      - run:
          name: Deploy Master to Prod
          command: git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$PROD_HEROKU_APP_NAME.git master --force
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy-auto:
          requires:
            - build
      - hold-deploy-test:
          type: approval
          requires:
            - deploy-auto
      - deploy-test:
          requires:
            - hold-deploy-test
      - hold-deploy-prod:
          type: approval
          requires:
            - deploy-test
      - deploy-prod:
          requires:
            - hold-deploy-prod
